option IsInstanced;
option IsSkinned;
option HasTexShift;
option HasEnvMap;
option DepthWrite; // enabled by default in the C# material
option DepthTest; // also enabled by default
option Blend = IsOpaque, IsAlphaBlend, IsAdditiveBlend, IsAdditiveAlphaBlend;
option HasFog;

variants exclude if (IsSkinned && (IsInstanced || HasEnvMap || HasTexShift));
variants exclude if (!IsInstanced && (HasTexShift || HasEnvMap || !DepthWrite || !DepthTest || Blend != IsOpaque)); // we only use opaque materials for non-instanced currently

attributes float3 inPos;
attributes if (!IsSkinned) byte4_norm inColor;
attributes if (HasEnvMap) float3 inNormal;
attributes if (!HasEnvMap) float2 inUV;
attributes if (IsSkinned)
{
    float4 inWeights;
    byte4 inIndices;
}

instances mat4 world;
instances if (HasTexShift) mat3 inTexShift;
instances byte4_norm inTint;

varying
{
    float2 varUV;
    float4 varColor;
}
varying if (HasFog) float varFogFactor;

uniform texture2D mainTexture;
uniform sampler mainSampler;
uniform mat4 projection;
uniform view
{
    mat4 viewMatrix;
    float4 camPos;
    float4 camDir;
}
uniform factors
{
    float inTextureFactor;
    float inVertexColorFactor;
    float inTintFactor;
    float inAlphaReference;
    float4 inAmbient;
}
uniform fogParams if (HasFog)
{
    float4 fogColor;
    float fogOffset;
    float fogScale;
    float fogExp;
}
uniform if (IsSkinned) buffer mat4[] pose;

pipeline
{
    blend One + Zero One + One;
    output r8_g8_b8_a8_unorm outColor;
    output D32_Float_S8_UInt;
    depthwrite off;
    depthtest off;
}

pipeline if (DepthWrite)
{
    depthwrite on;
}

pipeline if (DepthTest)
{
    depthtest on;
}

pipeline if (Blend == IsAlphaBlend)
{
    blend SrcAlpha + InvSrcAlpha;
}

pipeline if (Blend == IsAdditiveBlend)
{
    blend One + One;
}

pipeline if (Blend == IsAdditiveAlphaBlend)
{
    blend SrcAlpha + One;
}

vec4 weighColor(vec4 color, float factor)
{
	return color * factor + vec4(1,1,1,1) * (1 - factor);
}

vertex
{
    vec4 pos = vec4(inPos, 1);

    if (IsSkinned)
    {
        pos =
            (pose[inIndices.x] * pos) * inWeights.x +
            (pose[inIndices.y] * pos) * inWeights.y +
            (pose[inIndices.z] * pos) * inWeights.z +
            (pose[inIndices.w] * pos) * inWeights.w;
        pos.w = 1;
    }

	pos = world * pos;
	pos = viewMatrix * pos;
	pos = projection * pos;
	gl_Position = pos;
    
    vec2 uv;
    if (HasEnvMap)
    {
        float3 incident = normalize(vec3(world[3] - camPos - camDir + vec4(inPos, 0)));
        float cosAngle = dot(incident, inNormal);
        float3 reflected = inNormal * -2 * cosAngle - incident;
        uv = normalize(reflected).xz;
        uv = (uv + 1) / 2;
    }
    else
        uv = inUV;
    if (HasTexShift)
        uv = vec3(inTexShift * vec3(uv, 1)).xy;
	varUV = uv;

    if (IsSkinned)
    {
        varColor = clamp(inTint + inAmbient, 0, 1);
    }
    else
    {
        varColor = inColor;
    }

    // Let's start with per-vertex fog and see where this leads us
    if (HasFog)
    {
        float fogFactor = (fogOffset - pos.z) * fogScale;
        if (fogExp > 0)
            fogFactor = 1 / pow(2, pow(fogFactor, fogExp));
        varFogFactor = clamp(1 - fogFactor, 0, 1);
    }
}

fragment
{
    vec4 color;
    if (IsSkinned)
    {
        color = varColor * texture(sampler2D(mainTexture, mainSampler), varUV);
    }
    else
    {
        color = weighColor(texture(sampler2D(mainTexture, mainSampler), varUV), inTextureFactor)
		    * weighColor(varColor, inVertexColorFactor)
		    * weighColor(inTint, inTintFactor);
    }
	if (color.a < inAlphaReference)
		discard;
    if (HasFog)
	    outColor = vec4(mix(color.xyz, fogColor.xyz, varFogFactor), color.a);
    else
        outColor = color;
}
