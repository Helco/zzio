option IsInstanced; // TODO: I probably need a way for instanced-only shaders?
option IsFont;

instances
{
	float2 inPos;
	float2 inSize;
	float2 inUVPos;
	float2 inUVSize;
	byte4_norm inColor;
	float inTexWeight;
}

uniform texture2D mainTexture;
uniform sampler mainSampler;
uniform float2 screenSize;

varying float2 varUV;

pipeline
{
	output r8_g8_b8_a8_unorm outColor;
	output d24_unorm_s8_uint;
	blend SrcAlpha + InvSrcAlpha;
	depthWrite off;
	depthTest off;
	cull none;
	topology triangleStrip;
}

vertex
{
	vec2 vertexOffset;
	vertexOffset.x = float(uint(gl_VertexIndex) % 2);
	vertexOffset.y = float((uint(gl_VertexIndex) >> 1) % 2);
	vec2 pos = floor(floor(inPos) + inSize * vertexOffset);
	pos = pos / screenSize;
	pos = pos * 2 - 1;
	pos.y *= -1;
	gl_Position = vec4(pos, 0.5, 1);

	varUV = inUVPos + inUVSize * vertexOffset;
}

fragment
{
	vec2 uv = varUV;
	if (IsFont)
	{
		vec2 tsize = textureSize(sampler2D(mainTexture, mainSampler), 0);
		vec2 iuv = varUV * tsize;
		uv = (floor(iuv) + vec2(0.5, 0.5)) / tsize;
	}
	vec4 color = texture(sampler2D(mainTexture, mainSampler), uv) * inTexWeight;
	color += (1 - inTexWeight) * inColor;
	if (color.a < 0.1)
		discard;
	outColor = color;
}
